const chai = require('chai');
const chaiHttp = require('chai-http');
const app = require('../server');
const { expect } = chai;

chai.use(chaiHttp);

describe('Authentication', () => {
  describe('POST /signin', () => {
    it('should sign in and set a JWT token in a cookie', (done) => {
      chai.request(app)
        .post('/signin')
        .send({ username: 'testuser', password: 'testpassword' })
        .end((err, res) => {
          expect(res).to.have.status(200);
          expect(res.body).to.have.property('message', 'Signed in successfully');
          expect(res).to.have.cookie('auth');
          done();
        });
    });

    it('should return 400 if username or password is missing', (done) => {
      chai.request(app)
        .post('/signin')
        .send({ username: 'testuser' })
        .end((err, res) => {
          expect(res).to.have.status(400);
          expect(res.body).to.have.property('message', 'Username and password are required');
          done();
        });
    });
  });

  describe('GET /protected', () => {
    let agent = chai.request.agent(app);

    before((done) => {
      agent
        .post('/signin')
        .send({ username: 'testuser', password: 'testpassword' })
        .end((err, res) => {
          expect(res).to.have.status(200);
          expect(res).to.have.cookie('auth');
          done();
        });
    });

    it('should access protected route with valid token', (done) => {
      agent
        .get('/protected')
        .end((err, res) => {
          expect(res).to.have.status(200);
          expect(res.body).to.have.property('message', 'Access granted');
          expect(res.body).to.have.property('user');
          expect(res.body.user).to.have.property('username', 'testuser');
          done();
        });
    });

    it('should return 401 if token is missing', (done) => {
      chai.request(app)
        .get('/protected')
        .end((err, res) => {
          expect(res).to.have.status(401);
          expect(res.body).to.have.property('message', 'Unauthorized');
          done();
        });
    });
  });
});
